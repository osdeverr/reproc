name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-6,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-clang-6.0,
          ubuntu-18.04-clang-8,
          windows-2016-cl,
          windows-2016-clang-cl,
          windows-2016-clang,
          windows-2016-gcc,
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          windows-2019-gcc,
          macOS-10.14-clang
        ]

        include:
          - name: ubuntu-18.04-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-6.0
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"

          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"

          - name: windows-2016-cl
            os: windows-2016
            compiler: cl

          - name: windows-2016-clang-cl
            os: windows-2016
            compiler: clang-cl

          - name: windows-2016-clang
            os: windows-2016
            compiler: clang

          - name: windows-2016-gcc
            os: windows-2016
            compiler: gcc

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang

          - name: windows-2019-gcc
            os: windows-2019
            compiler: gcc

          - name: macOS-10.14-clang
            os: macOS-10.14
            compiler: clang

    # Github Actions resets environment variables between steps so we have to
    # add the required environment variables at the start of each step.
    # See https://github.community/t5/GitHub-Actions/Support-global-environment-variables/td-p/30481.

    steps:
      - uses: actions/checkout@v1

      - name: Install (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"
          sudo apt-get update

          sudo apt-get install -y ninja-build clang-tidy-8
          sudo ln -s /usr/bin/clang-tidy-8 /usr/local/bin/clang-tidy

      - name: Install (Ubuntu GCC)
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'gcc')
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y g++-${{ matrix.version }}

          echo ::set-env name=CC::gcc-${{ matrix.version }}
          echo ::set-env name=CXX::g++-${{ matrix.version }}

      - name: Install (Ubuntu Clang)
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'clang')
        run: |
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.version }} main"
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.version }}

          echo ::set-env name=CC::clang-${{ matrix.version }}
          echo ::set-env name=CXX::clang++-${{ matrix.version }}

      - name: Install (macOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install ninja llvm
          sudo ln -s /usr/local/opt/llvm/bin/clang-tidy /usr/local/bin/clang-tidy

          echo ::set-env name=CC::clang
          echo ::set-env name=CXX::clang++

      - name: Install (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja llvm --global

          if ("${{ matrix.compiler }}" -eq "gcc") {
            echo ::set-env name=CC::gcc
            echo ::set-env name=CXX::g++
          } elseif ("${{ matrix.compiler }}" -eq "clang") {
            echo ::set-env name=CC::clang
            echo ::set-env name=CXX::clang++
          } else {
            echo ::set-env name=CC::${{ matrix.compiler }}
            echo ::set-env name=CXX::${{ matrix.compiler }}
          }

          & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

      # We build reproc as a shared library to verify all the necessary symbols
      # are exported.

      # YAML folded multiline strings ('>') require the same indentation for all
      # lines in order to turn newlines into spaces.

      - name: Configure
        run: >
          cmake
          -B build
          -S .
          -G Ninja
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=ON
          -DREPROC++=ON
          -DREPROC_TEST=ON
          -DREPROC_EXAMPLES=ON
          -DREPROC_WARNINGS_AS_ERRORS=ON
          -DREPROC_TIDY=ON

      - name: Build
        run: cmake --build build

      # We use pwsh because the default shells (cmd and bash) use different path
      # separators while powershell handles both.

      - name: Test
        shell: pwsh
        run: |
          # We add the output directories to the PATH to make sure the tests and
          # examples can find the reproc and reproc++ DLL's.
          $env:Path += ";$(pwd)\build\reproc\lib"
          $env:Path += ";$(pwd)\build\reproc++\lib"

          cmake --build build --target test

          # Aside from running the tests we also make sure the examples don't
          # crash or return a non-zero exit code.
          build/reproc/examples/drain > $null
          build/reproc/examples/git-status > $null
          build/reproc++/examples/background cmake --help > $null
          build/reproc++/examples/cmake-help > $null
          build/reproc++/examples/forward cmake --help > $null
