name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-6,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-clang-6,
          ubuntu-18.04-clang-8,
          windows-2016-cl,
          windows-2016-clang-cl,
          windows-2016-clang,
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          macOS-10.14-clang
        ]

        include:
          - name: ubuntu-18.04-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-6
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"

          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"

          - name: windows-2016-cl
            os: windows-2016
            compiler: cl

          - name: windows-2016-clang-cl
            os: windows-2016
            compiler: clang-cl

          - name: windows-2016-clang
            os: windows-2016
            compiler: clang

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang

          - name: macOS-10.14-clang
            os: macOS-10.14
            compiler: clang

    # Github Actions resets environment variables between steps so we have to
    # add the required environment variables at the start of each step.
    # See https://github.community/t5/GitHub-Actions/Support-global-environment-variables/td-p/30481.

    # Because we cannot set the `CC` and `CXX` environment variables, we
    # override the `/usr/bin/cc` and `/usr/bin/c++` symlinks on Linux instead.

    steps:
      - uses: actions/checkout@v1

      - name: Install (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"
          sudo apt-get update

          sudo apt-get install -y ninja-build clang-tidy-8
          sudo ln -s /usr/bin/clang-tidy-8 /usr/bin/clang-tidy

      - name: Install (Ubuntu GCC)
        if: startsWith(matrix.os, 'ubuntu') && matrix.compiler == 'gcc'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y g++-${{ matrix.version }}

          sudo ln -sf /usr/bin/gcc-${{ matrix.version }} /usr/bin/cc
          sudo ln -sf /usr/bin/g++-${{ matrix.version }} /usr/bin/c++

      - name: Install (Ubuntu Clang)
        if: startsWith(matrix.os, 'ubuntu') && matrix.compiler == 'clang'
        run: |
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.version }} main"
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.version }}

          sudo ln -sf /usr/bin/clang-${{ matrix.version }} /usr/bin/cc
          sudo ln -sf /usr/bin/clang++-${{ matrix.version }} /usr/bin/c++

      - name: Install (macOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install ninja llvm
          sudo ln -s /usr/local/opt/llvm/bin/clang-tidy /usr/local/bin/clang-tidy

      - name: Install (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja llvm --global

      # We build reproc as a shared library to verify all the necessary symbols
      # are exported.

      - name: Configure (Ubuntu && macOS)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
        run: |
          cmake \
            -B build \
            -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DREPROC++=ON \
            -DREPROC_TEST=ON \
            -DREPROC_EXAMPLES=ON \
            -DREPROC_WARNINGS_AS_ERRORS=ON \
            -DREPROC_TIDY=ON \
            -DREPROC_SANITIZERS=ON

      - name: Configure (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          set PATH=C:\ProgramData\scoop\shims;%PATH%
          call .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

          if ${{ matrix.compiler }} == "clang" (
            set CC=clang
            set CXX=clang++
          ) else (
            set CC=${{ matrix.compiler }}
            set CXX=${{ matrix.compiler }}
          )

          cmake ^
            -B build ^
            -S . ^
            -G Ninja ^
            -DCMAKE_BUILD_TYPE=Debug ^
            -DBUILD_SHARED_LIBS=ON ^
            -DREPROC++=ON ^
            -DREPROC_TEST=ON ^
            -DREPROC_EXAMPLES=ON ^
            -DREPROC_WARNINGS_AS_ERRORS=ON ^
            -DREPROC_TIDY=ON

      - name: Build (Ubuntu && macOS)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
        run: cmake --build build

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          call .github\workflows\vsenv.bat -arch=x64 -host_arch=x64
          cmake --build build

      # Aside from running the tests we also make sure the examples don't crash
      # or return a non-zero exit code.

      - name: Test (Ubuntu && macOS)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
        run: |
          cmake --build build --target test
          build/reproc/examples/drain
          build/reproc/examples/git-status
          build/reproc++/examples/background cmake --help
          build/reproc++/examples/cmake-help
          build/reproc++/examples/forward cmake --help

      # We add the output directories to the PATH to make sure the tests and
      # examples can find the reproc and reproc++ DLL's.

      - name: Test (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          set PATH=%cd%\build\reproc\lib;%PATH%
          set PATH=%cd%\build\reproc++\lib;%PATH%
          cmake --build build --target test
          build\reproc\examples\drain
          build\reproc\examples\git-status
          build\reproc++\examples\background cmake --help
          build\reproc++\examples\cmake-help
          build\reproc++\examples\forward cmake --help
