name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.config.os }}-${{ matrix.config.compiler }}-${{ matrix.config.version }}
    runs-on: ${{ matrix.config.os }}-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu
            compiler: gcc
            version: "6"

          - os: ubuntu
            compiler: gcc
            version: "9"

          - os: ubuntu
            compiler: clang
            version: "6.0"

          - os: ubuntu
            compiler: clang
            version: "9"

          - os: windows
            compiler: cl
            version: "default"

          - os: windows
            compiler: clang-cl
            version: "latest"

          - os: windows
            compiler: clang
            version: "latest"

          - os: windows
            compiler: gcc
            version: "latest"

          - os: macos
            compiler: xcode
            version: "default"

          - os: macos
            compiler: gcc
            version: "latest"

    steps:
      - uses: actions/checkout@v1

      - name: Install (Ubuntu)
        if: matrix.config.os == 'ubuntu'
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

          # LLVM 9 is not yet in Bionic's repositories.
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          sudo apt-get update

          sudo apt-get install -y ninja-build clang-tidy-9
          sudo ln -s /usr/bin/clang-tidy-9 /usr/local/bin/clang-tidy

          if [ "${{ matrix.config.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.config.version }}
            echo "::set-env name=CC::gcc-${{ matrix.config.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.config.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.config.version }}
            echo "::set-env name=CC::clang-${{ matrix.config.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.config.version }}"
          fi

      - name: Install (macOS)
        if: matrix.config.os == 'macos'
        run: |
          brew install ninja llvm
          sudo ln -s /usr/local/opt/llvm/bin/clang-tidy /usr/local/bin/clang-tidy

          if [ "${{ matrix.config.compiler }}" = "gcc" ]; then
            brew install gcc
            echo "::set-env name=CC::gcc"
            echo "::set-env name=CXX::g++"
          else
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          fi

      - name: Install (Windows)
        if: matrix.config.os == 'windows'
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install ninja llvm --global

          if ("${{ matrix.config.compiler }}" -eq "gcc") {
            echo "::set-env name=CC::gcc"
            echo "::set-env name=CXX::g++"
            # Git Bash adds its own version of libstdc++-6.dll to the PATH which
            # differs from the version which MinGW links against. Because this
            # version is found before MinGW's version, the tests and examples
            # fail to execute. We fix the issue by linking statically against
            # libstdc++.
            echo "::set-env name=CXXFLAGS::-static-libstdc++"
          } elseif ("${{ matrix.config.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.config.compiler }}"
            echo "::set-env name=CXX::${{ matrix.config.compiler }}"
          }

          # We add the output directories to the PATH to make sure the tests and
          # examples can find the reproc and reproc++ DLL's.
          $env:PATH += ";$pwd\build\reproc\lib"
          $env:PATH += ";$pwd\build\reproc++\lib"

          # Make all PATH additions made by scoop and ourselves global.
          echo "::set-env name=PATH::$env:PATH"

          if ("${{ matrix.config.compiler }}".endswith("cl")) {
            & .github\workflows\vsenv.ps1 -arch x64 -hostArch x64
          }

      # We build reproc as a shared library to verify all the necessary symbols
      # are exported.

      # YAML folded multiline strings ('>') require the same indentation for all
      # lines in order to turn newlines into spaces.

      - name: Configure
        run: >
          cmake
          -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=ON
          -DREPROC++=ON
          -DREPROC_TEST=ON
          -DREPROC_EXAMPLES=ON
          -DREPROC_WARNINGS=ON
          -DREPROC_WARNINGS_AS_ERRORS=ON
          -DREPROC_TIDY=ON

      - name: Configure Sanitizers (Ubuntu && macOS)
        if: matrix.config.os == 'ubuntu' || matrix.config.os == 'macos'
        run: cmake build -DREPROC_SANITIZERS=ON

      - name: Build
        run: cmake --build build

      # Aside from running the tests we also make sure the examples don't
      # crash or return a non-zero exit code.

      - name: Test
        shell: bash
        run: |
          build/test

          build/reproc/examples/drain
          build/reproc/examples/git-status
          build/reproc/examples/inherit cmake --help
          build/reproc++/examples/background cmake --help
          build/reproc++/examples/cmake-help
          build/reproc++/examples/forward cmake --help
